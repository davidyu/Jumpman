package{	import com.neriksworkshop.lib.ASaudio.Track;		import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.trace.Trace;	import flash.ui.*;	import flash.utils.Timer;
	public class Controller	{				//preset keys for controls. Should be settable by player				private const DOUBLE_TAP_INTERVAL:Number = 1000;				private var Up:int = 38;		private var Down:int = 40;		private var Left:int = 37;		private var Right:int = 39;		private var _cmdCameraFocus:int = 16;		private var _cmdActivateMagnet:int = 191;				private var _crouching:Boolean;		private var _canStomp:Boolean = false;				private var _doubleTapTimer:Timer;				private var _rightKeyIsDown:Boolean = false;		private var _leftKeyIsDown:Boolean = false;		private var _subject:PlayerActor;								public function Controller(stage:DisplayObjectContainer, subject:PlayerActor, control_config:Control)		{			//assign control values			Up = control_config.Up;			Down = control_config.Down;			Left = control_config.Left;			Right = control_config.Right;			_cmdCameraFocus = control_config.cmdCameraFocus;			_cmdActivateMagnet = control_config.cmdActivateMagnet;						stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			_subject = subject;						_doubleTapTimer = new Timer(DOUBLE_TAP_INTERVAL, 1);						//trace("_subject " + _subject + " is controlled by " + this);		}						private function keyDownHandler(event:KeyboardEvent):void		{			if (event.keyCode == Left) {				_leftKeyIsDown = true;				_subject.moveLeft();			}			if (event.keyCode == Up) {				_subject.jump(); //jump up			}			if (event.keyCode == Right) {				_rightKeyIsDown = true;		    	_subject.moveRight();			}			if (event.keyCode == Down) {				//trace(_subject.hasThePower);				_subject.activateNearestSwitchIfApplicable();				if(!_crouching) _subject.toggleCrouch(true);				_crouching = true;			}						if (event.keyCode == _cmdCameraFocus) {				Camera.subject = _subject.body;								//update message								var key:String				if (_subject.partner.playerController.cmdCameraFocus==16) {					key = "Shift";				} else {					key = String.fromCharCode(_subject.partner.playerController.cmdCameraFocus);				}								var message:String = "Press " + key + " to focus on the other player; spacebar to focus on both.";								_subject.world.newMessage(message);							}						if (event.keyCode == _cmdActivateMagnet) {				_subject.activateMagneticPowers();			}						if (event.keyCode == 81) {								var test:Track = new Track("sfx/Pop1.mp3");				test.start();							}			//add camera controls :: TEMPORARY SOLUTION			//TODO: get rid of these controls and add auto camera controls		}				private function keyUpHandler(event:KeyboardEvent):void		{				if (event.keyCode == Left) {				if(!_rightKeyIsDown) {					_subject.stopMoving();				}				_leftKeyIsDown = false;			}						if (event.keyCode == Right) {				if(!_leftKeyIsDown) {					_subject.stopMoving();				}				_rightKeyIsDown = false;			}						if (event.keyCode == Up) {				if(!_subject.isDescending) {					_subject.slowDownAscentIfApplicable();				}			}						if (event.keyCode == Down) {								_subject.toggleCrouch(false);								if(_canStomp) {					_subject.stomp();					disableStompForRealz();									} else {					_crouching = false;					enableStomp();				}																//double keytap; 				//if count timer is lower than double click count then it is a double click				//execute double click actions				//reset last doubleclick count								//else, do single click actions				//reset last doubleclick count				//start doubleclick count							}						if (event.keyCode == _cmdActivateMagnet) {				_subject.deactivateMagneticPowers();			}								}				private function disableStomp(event:TimerEvent):void {			_canStomp = false;						_doubleTapTimer.reset();			_doubleTapTimer.stop();		}				private function disableStompForRealz():void { //a non-timer event function			_canStomp = false;						_doubleTapTimer.reset();			_doubleTapTimer.stop();		}				private function enableStomp():void {			_canStomp = true;						_doubleTapTimer.reset();			_doubleTapTimer.start();			_doubleTapTimer.addEventListener(TimerEvent.TIMER_COMPLETE, disableStomp);		}						public function get cmdCameraFocus():int { return _cmdCameraFocus; }	}}